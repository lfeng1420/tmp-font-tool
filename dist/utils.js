"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const fs = require("fs");
class Utils {
    static getShapeDesc(contours) {
        let shapeDesc = '';
        contours.forEach((contour) => {
            shapeDesc += '{';
            const lastIndex = contour.length - 1;
            let _x, _y;
            const firstCommand = contour[0];
            contour.forEach((command, index) => {
                this.roundAllValue(command, 3);
                if (command.type === 'Z') {
                    if (firstCommand.type !== 'Z' && (firstCommand.x !== _x || firstCommand.y !== _y)) {
                        shapeDesc += '# ';
                    }
                }
                else {
                    if (command.type === 'C') {
                        shapeDesc += `(${command.x1}, ${command.y1}; ${command.x2}, ${command.y2}); `;
                    }
                    else if (command.type === 'Q') {
                        shapeDesc += `(${command.x1}, ${command.y1}); `;
                    }
                    shapeDesc += `${command.x}, ${command.y}`;
                    _x = command.x;
                    _y = command.y;
                    if (index !== lastIndex) {
                        shapeDesc += '; ';
                    }
                }
            });
            shapeDesc += '}';
        });
        return shapeDesc;
    }
    static parseTextures(jsonPath) {
        var _a;
        try {
            let data = fs.readFileSync(jsonPath, "utf-8");
            const fntConf = JSON.parse(data);
            if (((_a = fntConf === null || fntConf === void 0 ? void 0 : fntConf.pageData) === null || _a === void 0 ? void 0 : _a.length) <= 0) {
                return undefined;
            }
            const textureMap = new Map();
            for (const page of fntConf.pageData) {
                textureMap.set(page.id, page.file);
            }
            return (0, lodash_1.chain)(Array.from(textureMap.entries())).sortBy(([key]) => key).map(([, value]) => value).value();
        }
        catch (err) {
            console.error(`${err}`);
            return undefined;
        }
    }
    static checkTexturesMatch(texturesSrc, texturesDst) {
        if (!texturesSrc || !texturesDst) {
            return false;
        }
        if (texturesSrc.length !== texturesDst.length) {
            return false;
        }
        for (let index = 0; index < texturesDst.length; ++index) {
            if (texturesSrc[index].__uuid__ !== texturesDst[index].__uuid__) {
                return false;
            }
        }
        return true;
    }
    static roundAllValue(obj, decimal = 0) {
        Object.keys(obj).forEach(key => {
            const value = obj[key];
            if (typeof value === 'object' && value !== null) {
                this.roundAllValue(value, decimal);
            }
            else if ((0, lodash_1.isNumber)(value)) {
                const num = parseFloat(value.toString());
                obj[key] = (0, lodash_1.round)(num, decimal);
            }
        });
    }
}
exports.default = Utils;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxtQ0FBNkQ7QUFFN0QsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRXpCLE1BQXFCLEtBQUs7SUFDZixNQUFNLENBQUMsWUFBWSxDQUFDLFFBQXlCO1FBQ2hELElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDekIsU0FBUyxJQUFJLEdBQUcsQ0FBQztZQUNqQixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUNyQyxJQUFJLEVBQVUsRUFBRSxFQUFVLENBQUM7WUFDM0IsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQy9CLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7b0JBQ3ZCLElBQUksWUFBWSxDQUFDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxZQUFZLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUM7d0JBQ2hGLFNBQVMsSUFBSSxJQUFJLENBQUM7b0JBQ3RCLENBQUM7Z0JBQ0wsQ0FBQztxQkFBTSxDQUFDO29CQUNKLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQzt3QkFDdkIsU0FBUyxJQUFJLElBQUksT0FBTyxDQUFDLEVBQUUsS0FBSyxPQUFPLENBQUMsRUFBRSxLQUFLLE9BQU8sQ0FBQyxFQUFFLEtBQUss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QzlELE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzNCLE1BQU0sS0FBSyxHQUFJLEdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNoQyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFLENBQUM7Z0JBQzlDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZDLENBQUM7aUJBQU0sSUFBSSxJQUFBLGlCQUFRLEVBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDekIsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUN4QyxHQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBQSxjQUFLLEVBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzVDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQW5GRCx3QkFtRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXRoQ29tbWFuZCB9IGZyb20gXCJvcGVudHlwZS5qc1wiO1xyXG5pbXBvcnQgeyBpc051bWJlciwgcm91bmQsIGNoYWluLCBzb3J0QnksIG1hcCB9IGZyb20gJ2xvZGFzaCc7XHJcbmltcG9ydCB7IElDb21wVGV4dHVyZSwgSUZudENvbmZpZyB9IGZyb20gXCIuL2ludGVyZmFjZVwiO1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFV0aWxzIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0U2hhcGVEZXNjKGNvbnRvdXJzOiBQYXRoQ29tbWFuZFtdW10pIHtcclxuICAgICAgICBsZXQgc2hhcGVEZXNjID0gJyc7XHJcbiAgICAgICAgY29udG91cnMuZm9yRWFjaCgoY29udG91cikgPT4ge1xyXG4gICAgICAgICAgICBzaGFwZURlc2MgKz0gJ3snO1xyXG4gICAgICAgICAgICBjb25zdCBsYXN0SW5kZXggPSBjb250b3VyLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIGxldCBfeDogbnVtYmVyLCBfeTogbnVtYmVyO1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdENvbW1hbmQgPSBjb250b3VyWzBdO1xyXG4gICAgICAgICAgICBjb250b3VyLmZvckVhY2goKGNvbW1hbmQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvdW5kQWxsVmFsdWUoY29tbWFuZCwgMyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tbWFuZC50eXBlID09PSAnWicpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3RDb21tYW5kLnR5cGUgIT09ICdaJyAmJiAoZmlyc3RDb21tYW5kLnggIT09IF94IHx8IGZpcnN0Q29tbWFuZC55ICE9PSBfeSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVEZXNjICs9ICcjICc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWFuZC50eXBlID09PSAnQycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVEZXNjICs9IGAoJHtjb21tYW5kLngxfSwgJHtjb21tYW5kLnkxfTsgJHtjb21tYW5kLngyfSwgJHtjb21tYW5kLnkyfSk7IGA7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb21tYW5kLnR5cGUgPT09ICdRJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFwZURlc2MgKz0gYCgke2NvbW1hbmQueDF9LCAke2NvbW1hbmQueTF9KTsgYDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc2hhcGVEZXNjICs9IGAke2NvbW1hbmQueH0sICR7Y29tbWFuZC55fWA7XHJcbiAgICAgICAgICAgICAgICAgICAgX3ggPSBjb21tYW5kLng7XHJcbiAgICAgICAgICAgICAgICAgICAgX3kgPSBjb21tYW5kLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSBsYXN0SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVEZXNjICs9ICc7ICc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc2hhcGVEZXNjICs9ICd9JztcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gc2hhcGVEZXNjO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcGFyc2VUZXh0dXJlcyhqc29uUGF0aDogc3RyaW5nKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbGV0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoanNvblBhdGgsIFwidXRmLThcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGZudENvbmY6IElGbnRDb25maWcgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgICAgICAgICBpZiAoZm50Q29uZj8ucGFnZURhdGE/Lmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0ZXh0dXJlTWFwOiBNYXA8bnVtYmVyLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhZ2Ugb2YgZm50Q29uZi5wYWdlRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdGV4dHVyZU1hcC5zZXQocGFnZS5pZCwgcGFnZS5maWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY2hhaW4oQXJyYXkuZnJvbSh0ZXh0dXJlTWFwLmVudHJpZXMoKSkpLnNvcnRCeSgoW2tleV0pID0+IGtleSkubWFwKChbLCB2YWx1ZV0pID0+IHZhbHVlKS52YWx1ZSgpO1xyXG5cclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHtlcnJ9YCk7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY2hlY2tUZXh0dXJlc01hdGNoKHRleHR1cmVzU3JjPzogSUNvbXBUZXh0dXJlW10sIHRleHR1cmVzRHN0PzogSUNvbXBUZXh0dXJlW10pIHtcclxuICAgICAgICBpZiAoIXRleHR1cmVzU3JjIHx8ICF0ZXh0dXJlc0RzdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGV4dHVyZXNTcmMubGVuZ3RoICE9PSB0ZXh0dXJlc0RzdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRleHR1cmVzRHN0Lmxlbmd0aDsgKytpbmRleCkge1xyXG4gICAgICAgICAgICBpZiAodGV4dHVyZXNTcmNbaW5kZXhdLl9fdXVpZF9fICE9PSB0ZXh0dXJlc0RzdFtpbmRleF0uX191dWlkX18pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIHJvdW5kQWxsVmFsdWUob2JqOiBQYXRoQ29tbWFuZCwgZGVjaW1hbDogbnVtYmVyID0gMCkge1xyXG4gICAgICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IChvYmogYXMgYW55KVtrZXldO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yb3VuZEFsbFZhbHVlKHZhbHVlLCBkZWNpbWFsKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG51bSA9IHBhcnNlRmxvYXQodmFsdWUudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAob2JqIGFzIGFueSlba2V5XSA9IHJvdW5kKG51bSwgZGVjaW1hbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iXX0=